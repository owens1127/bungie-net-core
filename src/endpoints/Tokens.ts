/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-net-core code generator program
 * Repository: {@link https://github.com/owensimpson/bungie-net-core}
 * Adapted from {@link https://github.com/DestinyItemManager/bungie-api-ts}
 * Do not edit these files manually.
 */
//

import { BungieClientProtocol } from '../client';
import { BungieNetResponse } from '../interfaces/BungieNetResponse';
import { PartnerOfferClaimRequest } from '../models/Tokens/PartnerOfferClaimRequest';
import { PartnerOfferSkuHistoryResponse } from '../models/Tokens/PartnerOfferSkuHistoryResponse';
import { PartnerRewardHistoryResponse } from '../models/Tokens/PartnerRewardHistoryResponse';
import { BungieRewardDisplay } from '../models/Tokens/BungieRewardDisplay';
import { BungieMembershipType } from '../enums/BungieMembershipType';

/**
 * Twitch Drops self-repair function - scans twitch for drops not marked as
 * fulfilled and resyncs them.
 * @see {@link https://bungie-net.github.io/#Tokens.ForceDropsRepair}
 */
export async function forceDropsRepair(
  client: BungieClientProtocol
): Promise<BungieNetResponse<boolean>> {
  const url = new URL(`https://www.bungie.net/Platform[object Object]`);

  return client.fetch({ method: 'POST', url });
}

/**
 * Claim a partner offer as the authenticated user.
 * @see {@link https://bungie-net.github.io/#Tokens.ClaimPartnerOffer}
 */
export async function claimPartnerOffer(
  body: PartnerOfferClaimRequest,
  client: BungieClientProtocol
): Promise<BungieNetResponse<boolean>> {
  const url = new URL(`https://www.bungie.net/Platform[object Object]`);

  return client.fetch({
    method: 'POST',
    url,
    body,
    headers: { 'Content-Type': 'application/json' }
  });
}

/**
 * Apply a partner offer to the targeted user. This endpoint does not claim a new
 * offer, but any already claimed offers will be applied to the game if not already.
 * @see {@link https://bungie-net.github.io/#Tokens.ApplyMissingPartnerOffersWithoutClaim}
 */
export async function applyMissingPartnerOffersWithoutClaim(
  params: {
    /** The partner application identifier. */
    partnerApplicationId: number;
    /**
     * The bungie.net user to apply missing offers to. If not self, elevated
     * permissions are required.
     */
    targetBnetMembershipId: string;
  },
  client: BungieClientProtocol
): Promise<BungieNetResponse<boolean>> {
  const url = new URL(
    `https://www.bungie.net/Platform/Tokens/Partner/ApplyMissingOffers/${params.partnerApplicationId}/${params.targetBnetMembershipId}/`
  );

  return client.fetch({ method: 'POST', url });
}

/**
 * Returns the partner sku and offer history of the targeted user. Elevated
 * permissions are required to see users that are not yourself.
 * @see {@link https://bungie-net.github.io/#Tokens.GetPartnerOfferSkuHistory}
 */
export async function getPartnerOfferSkuHistory(
  params: {
    /** The partner application identifier. */
    partnerApplicationId: number;
    /**
     * The bungie.net user to apply missing offers to. If not self, elevated
     * permissions are required.
     */
    targetBnetMembershipId: string;
  },
  client: BungieClientProtocol
): Promise<BungieNetResponse<PartnerOfferSkuHistoryResponse[]>> {
  const url = new URL(
    `https://www.bungie.net/Platform/Tokens/Partner/History/${params.partnerApplicationId}/${params.targetBnetMembershipId}/`
  );

  return client.fetch({ method: 'GET', url });
}

/**
 * Returns the partner rewards history of the targeted user, both partner offers
 * and Twitch drops.
 * @see {@link https://bungie-net.github.io/#Tokens.GetPartnerRewardHistory}
 */
export async function getPartnerRewardHistory(
  params: {
    /** The partner application identifier. */
    partnerApplicationId: number;
    /** The bungie.net user to return reward history for. */
    targetBnetMembershipId: string;
  },
  client: BungieClientProtocol
): Promise<BungieNetResponse<PartnerRewardHistoryResponse>> {
  const url = new URL(
    `https://www.bungie.net/Platform/Tokens/Partner/History/${params.targetBnetMembershipId}/Application/${params.partnerApplicationId}/`
  );

  return client.fetch({ method: 'GET', url });
}

/**
 * Returns the bungie rewards for the targeted user.
 * @see {@link https://bungie-net.github.io/#Tokens.GetBungieRewardsForUser}
 */
export async function getBungieRewardsForUser(
  params: {
    /**
     * bungie.net user membershipId for requested user rewards. If not self, elevated
     * permissions are required.
     */
    membershipId: string;
  },
  client: BungieClientProtocol
): Promise<BungieNetResponse<{ [key: string]: BungieRewardDisplay }>> {
  const url = new URL(
    `https://www.bungie.net/Platform/Tokens/Rewards/GetRewardsForUser/${params.membershipId}/`
  );

  return client.fetch({ method: 'GET', url });
}

/**
 * Returns the bungie rewards for the targeted user when a platform membership Id
 * and Type are used.
 * @see {@link https://bungie-net.github.io/#Tokens.GetBungieRewardsForPlatformUser}
 */
export async function getBungieRewardsForPlatformUser(
  params: {
    /**
     * users platform membershipId for requested user rewards. If not self, elevated
     * permissions are required.
     */
    membershipId: string;
    /** The target Destiny 2 membership type. */
    membershipType: BungieMembershipType;
  },
  client: BungieClientProtocol
): Promise<BungieNetResponse<{ [key: string]: BungieRewardDisplay }>> {
  const url = new URL(
    `https://www.bungie.net/Platform/Tokens/Rewards/GetRewardsForPlatformUser/${params.membershipId}/${params.membershipType}/`
  );

  return client.fetch({ method: 'GET', url });
}

/**
 * Returns a list of the current bungie rewards
 * @see {@link https://bungie-net.github.io/#Tokens.GetBungieRewardsList}
 */
export async function getBungieRewardsList(
  client: BungieClientProtocol
): Promise<BungieNetResponse<{ [key: string]: BungieRewardDisplay }>> {
  const url = new URL(`https://www.bungie.net/Platform[object Object]`);

  return client.fetch({ method: 'GET', url });
}
