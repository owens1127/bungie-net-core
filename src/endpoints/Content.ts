/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-net-core code generator program
 * Repository: {@link https://github.com/owens1127/bungie-net-core}
 * Do not edit these files manually.
 */
//

import { BungieHttpProtocol } from './..';
import { BungieNetResponse } from '../interfaces/BungieNetResponse';
import { ContentTypeDescription } from '../models/Content/Models/ContentTypeDescription';
import { ContentItemPublicContract } from '../models/Content/ContentItemPublicContract';
import { SearchResultOfContentItemPublicContract } from '../models/SearchResultOfContentItemPublicContract';
import { NewsArticleRssResponse } from '../models/Content/NewsArticleRssResponse';

/**
 * Gets an object describing a particular variant of content.
 * @see {@link https://bungie-net.github.io/#Content.GetContentType}
 */
export async function getContentType(
  http: BungieHttpProtocol,
  params: {
    type: string;
  }
): Promise<BungieNetResponse<ContentTypeDescription>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/GetContentType/${params.type}/`;
  const searchParams = undefined;
  return await http<BungieNetResponse<ContentTypeDescription>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}

/**
 * Returns a content item referenced by id
 * @see {@link https://bungie-net.github.io/#Content.GetContentById}
 */
export async function getContentById(
  http: BungieHttpProtocol,
  params: {
    /** false */
    head?: boolean;
    id: string;
    locale: string;
  }
): Promise<BungieNetResponse<ContentItemPublicContract>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/GetContentById/${params.id}/${params.locale}/`;
  const searchParams = new URLSearchParams();
  if (params.head !== undefined) searchParams.append('head', params.head.toString());
  return await http<BungieNetResponse<ContentItemPublicContract>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}

/**
 * Returns the newest item that matches a given tag and Content Type.
 * @see {@link https://bungie-net.github.io/#Content.GetContentByTagAndType}
 */
export async function getContentByTagAndType(
  http: BungieHttpProtocol,
  params: {
    /** Not used. */
    head?: boolean;
    locale: string;
    tag: string;
    type: string;
  }
): Promise<BungieNetResponse<ContentItemPublicContract>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/GetContentByTagAndType/${params.tag}/${params.type}/${params.locale}/`;
  const searchParams = new URLSearchParams();
  if (params.head !== undefined) searchParams.append('head', params.head.toString());
  return await http<BungieNetResponse<ContentItemPublicContract>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}

/**
 * Gets content based on querystring information passed in. Provides basic search
 * and text search capabilities.
 * @see {@link https://bungie-net.github.io/#Content.SearchContentWithText}
 */
export async function searchContentWithText(
  http: BungieHttpProtocol,
  params: {
    /** Content type tag: Help, News, etc. Supply multiple ctypes separated by space. */
    ctype?: string;
    /** Page number for the search results, starting with page 1. */
    currentpage?: number;
    /** Not used. */
    head?: boolean;
    locale: string;
    /** Word or phrase for the search. */
    searchtext?: string;
    /** For analytics, hint at the part of the app that triggered the search. Optional. */
    source?: string;
    /** Tag used on the content to be searched. */
    tag?: string;
  }
): Promise<BungieNetResponse<SearchResultOfContentItemPublicContract>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/Search/${params.locale}/`;
  const searchParams = new URLSearchParams();
  if (params.ctype !== undefined) searchParams.append('ctype', params.ctype.toString());
  if (params.currentpage !== undefined) searchParams.append('currentpage', params.currentpage.toString());
  if (params.head !== undefined) searchParams.append('head', params.head.toString());
  if (params.searchtext !== undefined) searchParams.append('searchtext', params.searchtext.toString());
  if (params.source !== undefined) searchParams.append('source', params.source.toString());
  if (params.tag !== undefined) searchParams.append('tag', params.tag.toString());
  return await http<BungieNetResponse<SearchResultOfContentItemPublicContract>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}

/**
 * Searches for Content Items that match the given Tag and Content Type.
 * @see {@link https://bungie-net.github.io/#Content.SearchContentByTagAndType}
 */
export async function searchContentByTagAndType(
  http: BungieHttpProtocol,
  params: {
    /** Page number for the search results starting with page 1. */
    currentpage?: number;
    /** Not used. */
    head?: boolean;
    /** Not used. */
    itemsperpage?: number;
    locale: string;
    tag: string;
    type: string;
  }
): Promise<BungieNetResponse<SearchResultOfContentItemPublicContract>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/SearchContentByTagAndType/${params.tag}/${params.type}/${params.locale}/`;
  const searchParams = new URLSearchParams();
  if (params.currentpage !== undefined) searchParams.append('currentpage', params.currentpage.toString());
  if (params.head !== undefined) searchParams.append('head', params.head.toString());
  if (params.itemsperpage !== undefined) searchParams.append('itemsperpage', params.itemsperpage.toString());
  return await http<BungieNetResponse<SearchResultOfContentItemPublicContract>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}

/**
 * Search for Help Articles.
 * @see {@link https://bungie-net.github.io/#Content.SearchHelpArticles}
 */
export async function searchHelpArticles(
  http: BungieHttpProtocol,
  params: {
    searchtext: string;
    size: string;
  }
): Promise<BungieNetResponse<object>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/SearchHelpArticles/${params.searchtext}/${params.size}/`;
  const searchParams = undefined;
  return await http<BungieNetResponse<object>>({ method: 'GET', baseUrl, searchParams, body: undefined });
}

/**
 * Returns a JSON string response that is the RSS feed for news articles.
 * @see {@link https://bungie-net.github.io/#Content.RssNewsArticles}
 */
export async function rssNewsArticles(
  http: BungieHttpProtocol,
  params: {
    /** Optionally filter response to only include news items in a certain category. */
    categoryfilter?: string;
    /** Optionally include full content body for each news item. */
    includebody?: boolean;
    /** Zero-based pagination token for paging through result sets. */
    pageToken: string;
  }
): Promise<BungieNetResponse<NewsArticleRssResponse>> {
  const baseUrl = `https://www.bungie.net/Platform/Content/Rss/NewsArticles/${params.pageToken}/`;
  const searchParams = new URLSearchParams();
  if (params.categoryfilter !== undefined) searchParams.append('categoryfilter', params.categoryfilter.toString());
  if (params.includebody !== undefined) searchParams.append('includebody', params.includebody.toString());
  return await http<BungieNetResponse<NewsArticleRssResponse>>({
    method: 'GET',
    baseUrl,
    searchParams,
    body: undefined
  });
}
