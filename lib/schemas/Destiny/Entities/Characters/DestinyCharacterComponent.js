/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from {@link https://github.com/DestinyItemManager/bungie-api-ts}
 * Repository: {@link https://github.com/owensimpson/oodestiny}
 * Do not edit these files manually.
 */

/**
 * This component contains base properties of the character. You'll probably want
 * to always request this component, but hey you do you.
 * @type DestinyCharacterComponent
 * @see {@link https://bungie-net.github.io/#/components/schemas/Destiny.Entities.Characters.DestinyCharacterComponent}
*/
class DestinyCharacterComponent {
  /**
   * Every Destiny Profile has a membershipId. This is provided on the character as
   * well for convenience.
   * @readonly
   * @type string
  */
  membershipId;
  /**
   * membershipType tells you the platform on which the character plays. Examine the
   * BungieMembershipType enumeration for possible values.
   * @readonly
   * @type BungieMembershipType
  */
  membershipType;
  /**
   * The unique identifier for the character.
   * @readonly
   * @type string
  */
  characterId;
  /**
   * The last date that the user played Destiny.
   * @readonly
   * @type string
  */
  dateLastPlayed;
  /**
   * If the user is currently playing, this is how long they've been playing.
   * @readonly
   * @type string
  */
  minutesPlayedThisSession;
  /**
   * If this value is 525,600, then they played Destiny for a year. Or they're a very
   * dedicated Rent fan. Note that this includes idle time, not just time spent
   * actually in activities shooting things.
   * @readonly
   * @type string
  */
  minutesPlayedTotal;
  /**
   * The user's calculated "Light Level". Light level is an indicator of your power
   * that mostly matters in the end game, once you've reached the maximum character
   * level: it's a level that's dependent on the average Attack/Defense power of your
   * items.
   * @readonly
   * @type number
  */
  light;
  /**
   * Your character's stats, such as Agility, Resilience, etc... *not* historical
   * stats.
   *
   * You'll have to call a different endpoint for those.
   * @readonly
   * @type Object.key<number, number>
  */
  stats;
  /**
   * Use this hash to look up the character's DestinyRaceDefinition. Mapped to
   * DestinyRaceDefinition in the manifest.
   * @readonly
   * @type number
  */
  raceHash;
  /**
   * Use this hash to look up the character's DestinyGenderDefinition. Mapped to
   * DestinyGenderDefinition in the manifest.
   * @readonly
   * @type number
  */
  genderHash;
  /**
   * Use this hash to look up the character's DestinyClassDefinition. Mapped to
   * DestinyClassDefinition in the manifest.
   * @readonly
   * @type number
  */
  classHash;
  /**
   * Mostly for historical purposes at this point, this is an enumeration for the
   * character's race.
   *
   * It'll be preferable in the general case to look up the related definition: but
   * for some people this was too convenient to remove.
   * @readonly
   * @type DestinyRace
  */
  raceType;
  /**
   * Mostly for historical purposes at this point, this is an enumeration for the
   * character's class.
   *
   * It'll be preferable in the general case to look up the related definition: but
   * for some people this was too convenient to remove.
   * @readonly
   * @type DestinyClass
  */
  classType;
  /**
   * Mostly for historical purposes at this point, this is an enumeration for the
   * character's Gender.
   *
   * It'll be preferable in the general case to look up the related definition: but
   * for some people this was too convenient to remove. And yeah, it's an enumeration
   * and not a boolean. Fight me.
   * @readonly
   * @type DestinyGender
  */
  genderType;
  /**
   * A shortcut path to the user's currently equipped emblem image. If you're just
   * showing summary info for a user, this is more convenient than examining their
   * equipped emblem and looking up the definition.
   * @readonly
   * @type string
  */
  emblemPath;
  /**
   * A shortcut path to the user's currently equipped emblem background image. If you'
   * re just showing summary info for a user, this is more convenient than examining
   * their equipped emblem and looking up the definition.
   * @readonly
   * @type string
  */
  emblemBackgroundPath;
  /**
   * The hash of the currently equipped emblem for the user. Can be used to look up
   * the DestinyInventoryItemDefinition. Mapped to DestinyInventoryItemDefinition in
   * the manifest.
   * @readonly
   * @type number
  */
  emblemHash;
  /**
   * A shortcut for getting the background color of the user's currently equipped
   * emblem without having to do a DestinyInventoryItemDefinition lookup.
   * @readonly
   * @type DestinyColor
  */
  emblemColor;
  /**
   * The progression that indicates your character's level. Not their light level,
   * but their character level: you know, the thing you max out a couple hours in and
   * then ignore for the sake of light level.
   * @readonly
   * @type DestinyProgression
  */
  levelProgression;
  /**
   * The "base" level of your character, not accounting for any light level.
   * @readonly
   * @type number
  */
  baseCharacterLevel;
  /**
   * A number between 0 and 100, indicating the whole and fractional % remaining to
   * get to the next character level.
   * @readonly
   * @type number
  */
  percentToNextLevel;
  /**
   * If this Character has a title assigned to it, this is the identifier of the
   * DestinyRecordDefinition that has that title information. Mapped to
   * DestinyRecordDefinition in the manifest.
   * @readonly
   * @type number?
  */
  titleRecordHash;
}
module.exports = DestinyCharacterComponent;
