/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from {@link https://github.com/DestinyItemManager/bungie-api-ts}
 * Repository: {@link https://github.com/owensimpson/oodestiny}
 * Do not edit these files manually.
 */
//

/**
 * Display Categories are different from "categories" in that these are
 * specifically for visual grouping and display of categories in Vendor UI. The "
 * categories" structure is for validation of the contained items, and can be
 * categorized entirely separately from "Display Categories", there need be and
 * often will be no meaningful relationship between the two.
 * @type {typeof DestinyDisplayCategoryDefinition}
 * @see {@link https://bungie-net.github.io/#/components/schemas/Destiny.Definitions.DestinyDisplayCategoryDefinition}
*/
module.exports = class DestinyDisplayCategoryDefinition {
  /**
   * @readonly
   * @type {number}
  */
  index;
  /**
   * A string identifier for the display category.
   * @readonly
   * @type {string}
  */
  identifier;
  /**
   * @readonly
   * @type {number}
  */
  displayCategoryHash;
  /**
   * @readonly
   * @type {import('./Common/DestinyDisplayPropertiesDefinition')}
  */
  displayProperties;
  /**
   * If true, this category should be displayed in the "Banner" section of the vendor'
   * s UI.
   * @readonly
   * @type {boolean}
  */
  displayInBanner;
  /**
   * If it exists, this is the hash identifier of a DestinyProgressionDefinition that
   * represents the progression to show on this display category.
   *
   * Specific categories can now have thier own distinct progression, apparently. So
   * that's cool. Mapped to DestinyProgressionDefinition in the manifest.
   * @readonly
   * @type {number}
  */
  progressionHash;
  /**
   * If this category sorts items in a nonstandard way, this will be the way we sort.
   * @readonly
   * @type {import('../VendorDisplayCategorySortOrder')}
  */
  sortOrder;
  /**
   * An indicator of how the category will be displayed in the UI. It's up to you to
   * do something cool or interesting in response to this, or just to treat it as a
   * normal category.
   * @readonly
   * @type {number}
  */
  displayStyleHash;
  /**
   * An indicator of how the category will be displayed in the UI. It's up to you to
   * do something cool or interesting in response to this, or just to treat it as a
   * normal category.
   * @readonly
   * @type {string}
  */
  displayStyleIdentifier;
}
