/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from {@link https://github.com/DestinyItemManager/bungie-api-ts}
 * Repository: {@link https://github.com/owensimpson/oodestiny}
 * Do not edit these files manually.
 */
import { SingleComponentResponseOfDestinyVendorReceiptsComponent } from '../../SingleComponentResponseOfDestinyVendorReceiptsComponent';
import { SingleComponentResponseOfDestinyInventoryComponent } from '../../SingleComponentResponseOfDestinyInventoryComponent';
import { SingleComponentResponseOfDestinyProfileComponent } from '../../SingleComponentResponseOfDestinyProfileComponent';
import { SingleComponentResponseOfDestinyPlatformSilverComponent } from '../../SingleComponentResponseOfDestinyPlatformSilverComponent';
import { SingleComponentResponseOfDestinyKiosksComponent } from '../../SingleComponentResponseOfDestinyKiosksComponent';
import { SingleComponentResponseOfDestinyPlugSetsComponent } from '../../SingleComponentResponseOfDestinyPlugSetsComponent';
import { SingleComponentResponseOfDestinyProfileProgressionComponent } from '../../SingleComponentResponseOfDestinyProfileProgressionComponent';
import { SingleComponentResponseOfDestinyPresentationNodesComponent } from '../../SingleComponentResponseOfDestinyPresentationNodesComponent';
import { SingleComponentResponseOfDestinyProfileRecordsComponent } from '../../SingleComponentResponseOfDestinyProfileRecordsComponent';
import { SingleComponentResponseOfDestinyProfileCollectiblesComponent } from '../../SingleComponentResponseOfDestinyProfileCollectiblesComponent';
import { SingleComponentResponseOfDestinyProfileTransitoryComponent } from '../../SingleComponentResponseOfDestinyProfileTransitoryComponent';
import { SingleComponentResponseOfDestinyMetricsComponent } from '../../SingleComponentResponseOfDestinyMetricsComponent';
import { SingleComponentResponseOfDestinyStringVariablesComponent } from '../../SingleComponentResponseOfDestinyStringVariablesComponent';
import { DictionaryComponentResponseOfint64AndDestinyCharacterComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCharacterComponent';
import { DictionaryComponentResponseOfint64AndDestinyInventoryComponent } from '../../DictionaryComponentResponseOfint64AndDestinyInventoryComponent';
import { DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent';
import { DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent';
import { DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent';
import { DictionaryComponentResponseOfint64AndDestinyKiosksComponent } from '../../DictionaryComponentResponseOfint64AndDestinyKiosksComponent';
import { DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent } from '../../DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent';
import { DestinyBaseItemComponentSetOfuint32 } from '../../DestinyBaseItemComponentSetOfuint32';
import { DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent';
import { DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent';
import { DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent';
import { DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent';
import { DictionaryComponentResponseOfint64AndDestinyCraftablesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCraftablesComponent';
import { DestinyItemComponentSetOfint64 } from '../../DestinyItemComponentSetOfint64';
import { DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent } from '../../DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent';
/**
 * The response for GetDestinyProfile, with components for character and item-level
 * data.
 * @see {@link https://bungie-net.github.io/#/components/schemas/Destiny.Responses.DestinyProfileResponse}
*/
export interface DestinyProfileResponse {
    /**
     * Recent, refundable purchases you have made from vendors. When will you use it?
     * Couldn't say...
     *
     * COMPONENT TYPE: VendorReceipts
    */
    readonly vendorReceipts: SingleComponentResponseOfDestinyVendorReceiptsComponent;
    /**
     * The profile-level inventory of the Destiny Profile.
     *
     * COMPONENT TYPE: ProfileInventories
    */
    readonly profileInventory: SingleComponentResponseOfDestinyInventoryComponent;
    /**
     * The profile-level currencies owned by the Destiny Profile.
     *
     * COMPONENT TYPE: ProfileCurrencies
    */
    readonly profileCurrencies: SingleComponentResponseOfDestinyInventoryComponent;
    /**
     * The basic information about the Destiny Profile (formerly "Account").
     *
     * COMPONENT TYPE: Profiles
    */
    readonly profile: SingleComponentResponseOfDestinyProfileComponent;
    /**
     * Silver quantities for any platform on which this Profile plays destiny.
     *
     * COMPONENT TYPE: PlatformSilver
    */
    readonly platformSilver: SingleComponentResponseOfDestinyPlatformSilverComponent;
    /**
     * Items available from Kiosks that are available Profile-wide (i.e. across all
     * characters)
     *
     * This component returns information about what Kiosk items are available to you
     * on a *Profile* level. It is theoretically possible for Kiosks to have items
     * gated by specific Character as well. If you ever have those, you will find them
     * on the characterKiosks property.
     *
     * COMPONENT TYPE: Kiosks
    */
    readonly profileKiosks: SingleComponentResponseOfDestinyKiosksComponent;
    /**
     * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more
     * info), this is the set of plugs and their states that are profile-scoped.
     *
     * This comes back with ItemSockets, as it is needed for a complete picture of the
     * sockets on requested items.
     *
     * COMPONENT TYPE: ItemSockets
    */
    readonly profilePlugSets: SingleComponentResponseOfDestinyPlugSetsComponent;
    /**
     * When we have progression information - such as Checklists - that may apply
     * profile-wide, it will be returned here rather than in the per-character
     * progression data.
     *
     * COMPONENT TYPE: ProfileProgression
    */
    readonly profileProgression: SingleComponentResponseOfDestinyProfileProgressionComponent;
    /** COMPONENT TYPE: PresentationNodes */
    readonly profilePresentationNodes: SingleComponentResponseOfDestinyPresentationNodesComponent;
    /** COMPONENT TYPE: Records */
    readonly profileRecords: SingleComponentResponseOfDestinyProfileRecordsComponent;
    /** COMPONENT TYPE: Collectibles */
    readonly profileCollectibles: SingleComponentResponseOfDestinyProfileCollectiblesComponent;
    /** COMPONENT TYPE: Transitory */
    readonly profileTransitoryData: SingleComponentResponseOfDestinyProfileTransitoryComponent;
    /** COMPONENT TYPE: Metrics */
    readonly metrics: SingleComponentResponseOfDestinyMetricsComponent;
    /** COMPONENT TYPE: StringVariables */
    readonly profileStringVariables: SingleComponentResponseOfDestinyStringVariablesComponent;
    /**
     * Basic information about each character, keyed by the CharacterId.
     *
     * COMPONENT TYPE: Characters
    */
    readonly characters: DictionaryComponentResponseOfint64AndDestinyCharacterComponent;
    /**
     * The character-level non-equipped inventory items, keyed by the Character's Id.
     *
     * COMPONENT TYPE: CharacterInventories
    */
    readonly characterInventories: DictionaryComponentResponseOfint64AndDestinyInventoryComponent;
    /**
     * Character-level progression data, keyed by the Character's Id.
     *
     * COMPONENT TYPE: CharacterProgressions
    */
    readonly characterProgressions: DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent;
    /**
     * Character rendering data - a minimal set of info needed to render a character in
     * 3D - keyed by the Character's Id.
     *
     * COMPONENT TYPE: CharacterRenderData
    */
    readonly characterRenderData: DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent;
    /**
     * Character activity data - the activities available to this character and its
     * status, keyed by the Character's Id.
     *
     * COMPONENT TYPE: CharacterActivities
    */
    readonly characterActivities: DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent;
    /**
     * The character's equipped items, keyed by the Character's Id.
     *
     * COMPONENT TYPE: CharacterEquipment
    */
    readonly characterEquipment: DictionaryComponentResponseOfint64AndDestinyInventoryComponent;
    /**
     * Items available from Kiosks that are available to a specific character as
     * opposed to the account as a whole. It must be combined with data from the
     * profileKiosks property to get a full picture of the character's available items
     * to check out of a kiosk.
     *
     * This component returns information about what Kiosk items are available to you
     * on a *Character* level. Usually, kiosk items will be earned for the entire
     * Profile (all characters) at once. To find those, look in the profileKiosks
     * property.
     *
     * COMPONENT TYPE: Kiosks
    */
    readonly characterKiosks: DictionaryComponentResponseOfint64AndDestinyKiosksComponent;
    /**
     * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more
     * info), this is the set of plugs and their states, per character, that are
     * character-scoped.
     *
     * This comes back with ItemSockets, as it is needed for a complete picture of the
     * sockets on requested items.
     *
     * COMPONENT TYPE: ItemSockets
    */
    readonly characterPlugSets: DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent;
    /**
     * Do you ever get the feeling that a system was designed *too* flexibly? That it
     * can be used in so many different ways that you end up being unable to provide an
     * easy to use abstraction for the mess that's happening under the surface?
     *
     * Let's talk about character-specific data that might be related to items without
     * instances. These two statements are totally unrelated, I promise.
     *
     * At some point during D2, it was decided that items - such as Bounties - could be
     * given to characters and *not* have instance data, but that *could* display and
     * even use relevant state information on your account and character.
     *
     * Up to now, any item that had meaningful dependencies on character or account
     * state had to be instanced, and thus "itemComponents" was all that you needed: it
     * was keyed by item's instance IDs and provided the stateful information you
     * needed inside.
     *
     * Unfortunately, we don't live in such a magical world anymore. This is
     * information held on a per-character basis about non-instanced items that the
     * characters have in their inventory - or that reference character-specific state
     * information even if it's in Account-level inventory - and the values related to
     * that item's state in relation to the given character.
     *
     * To give a concrete example, look at a Moments of Triumph bounty. They exist in a
     * character's inventory, and show/care about a character's progression toward
     * completing the bounty. But the bounty itself is a non-instanced item, like a mod
     * or a currency. This returns that data for the characters who have the bounty in
     * their inventory.
     *
     * I'm not crying, you're crying Okay we're both crying but it's going to be okay I
     * promise Actually I shouldn't promise that, I don't know if it's going to be okay
    */
    readonly characterUninstancedItemComponents: {
        [key: string]: DestinyBaseItemComponentSetOfuint32;
    };
    /** COMPONENT TYPE: PresentationNodes */
    readonly characterPresentationNodes: DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent;
    /** COMPONENT TYPE: Records */
    readonly characterRecords: DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent;
    /** COMPONENT TYPE: Collectibles */
    readonly characterCollectibles: DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent;
    /** COMPONENT TYPE: StringVariables */
    readonly characterStringVariables: DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent;
    /** COMPONENT TYPE: Craftables */
    readonly characterCraftables: DictionaryComponentResponseOfint64AndDestinyCraftablesComponent;
    /**
     * Information about instanced items across all returned characters, keyed by the
     * item's instance ID.
     *
     * COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component
     * types.]
    */
    readonly itemComponents: DestinyItemComponentSetOfint64;
    /**
     * A "lookup" convenience component that can be used to quickly check if the
     * character has access to items that can be used for purchasing.
     *
     * COMPONENT TYPE: CurrencyLookups
    */
    readonly characterCurrencyLookups: DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent;
}
