/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.15.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from <@link https://github.com/DestinyItemManager/bungie-api-ts>
 * Repository: <@link https://github.com/owensimpson/bungie-api-typedef>
 * Do not edit these files manually.
 */
import { HttpClient } from '../../http';
import { BungieCredentialType } from '../../schemas/BungieCredentialType';
import { BungieMembershipType } from '../../schemas/BungieMembershipType';
import { GeneralUser } from '../../schemas/User/GeneralUser';
import { GetCredentialTypesForAccountResponse } from '../../schemas/User/Models/GetCredentialTypesForAccountResponse';
import { HardLinkedUserMembership } from '../../schemas/User/HardLinkedUserMembership';
import { ServerResponse } from '../../generics/ServerResponse';
import { UserMembershipData } from '../../schemas/User/UserMembershipData';
import { UserSearchPrefixRequest } from '../../schemas/User/UserSearchPrefixRequest';
import { UserSearchResponse } from '../../schemas/User/UserSearchResponse';
import { UserTheme } from '../../schemas/Config/UserTheme';
/**
 * @see {@link https://bungie-net.github.io/#User.GetBungieNetUserById}
 */
export declare type GetBungieNetUserByIdParams = {
  /** The requested Bungie.net membership id. */
  id: string;
};
/**
 * Loads a bungienet user by membership id.
 * @see {@link https://bungie-net.github.io/#User.GetBungieNetUserById}
 */
export declare function getBungieNetUserById(
  http: HttpClient,
  params: GetBungieNetUserByIdParams
): Promise<ServerResponse<GeneralUser>>;
/**
 * @see {@link https://bungie-net.github.io/#User.GetSanitizedPlatformDisplayNames}
 */
export declare type GetSanitizedPlatformDisplayNamesParams = {
  /** The requested membership id to load. */
  membershipId: string;
};
/**
 * Gets a list of all display names linked to this membership id but sanitized (
 * profanity filtered). Obeys all visibility rules of calling user and is heavily
 * cached.
 * @see {@link https://bungie-net.github.io/#User.GetSanitizedPlatformDisplayNames}
 */
export declare function getSanitizedPlatformDisplayNames(
  http: HttpClient,
  params: GetSanitizedPlatformDisplayNamesParams
): Promise<
  ServerResponse<{
    [key in BungieCredentialType]: string;
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#User.GetCredentialTypesForTargetAccount}
 */
export declare type GetCredentialTypesForTargetAccountParams = {
  /** The user's membership id */
  membershipId: string;
};
/**
 * Returns a list of credential types attached to the requested account
 * @see {@link https://bungie-net.github.io/#User.GetCredentialTypesForTargetAccount}
 */
export declare function getCredentialTypesForTargetAccount(
  http: HttpClient,
  params: GetCredentialTypesForTargetAccountParams
): Promise<ServerResponse<GetCredentialTypesForAccountResponse[]>>;
/**
 * Returns a list of all available user themes.
 * @see {@link https://bungie-net.github.io/#User.GetAvailableThemes}
 */
export declare function getAvailableThemes(http: HttpClient): Promise<ServerResponse<UserTheme[]>>;
/**
 * @see {@link https://bungie-net.github.io/#User.GetMembershipDataById}
 */
export declare type GetMembershipDataByIdParams = {
  /** The membership ID of the target user. */
  membershipId: string;
  /** Type of the supplied membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Returns a list of accounts associated with the supplied membership ID and
 * membership type. This will include all linked accounts (even when hidden) if
 * supplied credentials permit it.
 * @see {@link https://bungie-net.github.io/#User.GetMembershipDataById}
 */
export declare function getMembershipDataById(
  http: HttpClient,
  params: GetMembershipDataByIdParams
): Promise<ServerResponse<UserMembershipData>>;
/**
 * Returns a list of accounts associated with signed in user. This is useful for
 * OAuth implementations that do not give you access to the token response.
 * @see {@link https://bungie-net.github.io/#User.GetMembershipDataForCurrentUser}
 */
export declare function getMembershipDataForCurrentUser(
  http: HttpClient
): Promise<ServerResponse<UserMembershipData>>;
/**
 * @see {@link https://bungie-net.github.io/#User.GetMembershipFromHardLinkedCredential}
 */
export declare type GetMembershipFromHardLinkedCredentialParams = {
  /** The credential to look up. Must be a valid SteamID64. */
  credential: string;
  /** The credential type. 'SteamId' is the only valid value at present. */
  crType: BungieCredentialType;
};
/**
 * Gets any hard linked membership given a credential. Only works for credentials
 * that are public (just SteamID64 right now). Cross Save aware.
 * @see {@link https://bungie-net.github.io/#User.GetMembershipFromHardLinkedCredential}
 */
export declare function getMembershipFromHardLinkedCredential(
  http: HttpClient,
  params: GetMembershipFromHardLinkedCredentialParams
): Promise<ServerResponse<HardLinkedUserMembership>>;
/**
 * @see {@link https://bungie-net.github.io/#User.SearchByGlobalNamePrefix}
 */
export declare type SearchByGlobalNamePrefixParams = {
  /** The display name prefix you're looking for. */
  displayNamePrefix: string;
  /** The zero-based page of results you desire. */
  page: number;
};
/**
 * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
 * @see {@link https://bungie-net.github.io/#User.SearchByGlobalNamePrefix}
 */
export declare function searchByGlobalNamePrefix(
  http: HttpClient,
  params: SearchByGlobalNamePrefixParams
): Promise<ServerResponse<UserSearchResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#User.SearchByGlobalNamePost}
 */
export declare type SearchByGlobalNamePostParams = {
  /** The zero-based page of results you desire. */
  page: number;
};
/**
 * Given the prefix of a global display name, returns all users who share that name.
 * @see {@link https://bungie-net.github.io/#User.SearchByGlobalNamePost}
 */
export declare function searchByGlobalNamePost(
  http: HttpClient,
  params: SearchByGlobalNamePostParams,
  body: UserSearchPrefixRequest
): Promise<ServerResponse<UserSearchResponse>>;
