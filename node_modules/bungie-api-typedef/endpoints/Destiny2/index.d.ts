/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.15.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from <@link https://github.com/DestinyItemManager/bungie-api-ts>
 * Repository: <@link https://github.com/owensimpson/bungie-api-typedef>
 * Do not edit these files manually.
 */
import { HttpClient } from '../../http';
import { AwaAuthorizationResult } from '../../schemas/Destiny/Advanced/AwaAuthorizationResult';
import { AwaInitializeResponse } from '../../schemas/Destiny/Advanced/AwaInitializeResponse';
import { AwaPermissionRequested } from '../../schemas/Destiny/Advanced/AwaPermissionRequested';
import { AwaUserResponse } from '../../schemas/Destiny/Advanced/AwaUserResponse';
import { BungieMembershipType } from '../../schemas/BungieMembershipType';
import { ClanBannerSource } from '../../schemas/Config/ClanBanner/ClanBannerSource';
import { DestinyActivityHistoryResults } from '../../schemas/Destiny/HistoricalStats/DestinyActivityHistoryResults';
import { DestinyActivityModeType } from '../../schemas/Destiny/HistoricalStats/Definitions/DestinyActivityModeType';
import { DestinyAggregateActivityResults } from '../../schemas/Destiny/HistoricalStats/DestinyAggregateActivityResults';
import { DestinyCharacterResponse } from '../../schemas/Destiny/Responses/DestinyCharacterResponse';
import { DestinyClanAggregateStat } from '../../schemas/Destiny/HistoricalStats/DestinyClanAggregateStat';
import { DestinyCollectibleNodeDetailResponse } from '../../schemas/Destiny/Responses/DestinyCollectibleNodeDetailResponse';
import { DestinyComponentType } from '../../schemas/Destiny/DestinyComponentType';
import { DestinyDefinition } from '../../schemas/Destiny/Definitions/DestinyDefinition';
import { DestinyEntitySearchResult } from '../../schemas/Destiny/Definitions/DestinyEntitySearchResult';
import { DestinyEquipItemResults } from '../../schemas/Destiny/DestinyEquipItemResults';
import { DestinyHistoricalStatsAccountResult } from '../../schemas/Destiny/HistoricalStats/DestinyHistoricalStatsAccountResult';
import { DestinyHistoricalStatsByPeriod } from '../../schemas/Destiny/HistoricalStats/DestinyHistoricalStatsByPeriod';
import { DestinyHistoricalStatsDefinition } from '../../schemas/Destiny/HistoricalStats/Definitions/DestinyHistoricalStatsDefinition';
import { DestinyHistoricalWeaponStatsData } from '../../schemas/Destiny/HistoricalStats/DestinyHistoricalWeaponStatsData';
import { DestinyInsertPlugsActionRequest } from '../../schemas/Destiny/Requests/Actions/DestinyInsertPlugsActionRequest';
import { DestinyInsertPlugsFreeActionRequest } from '../../schemas/Destiny/Requests/Actions/DestinyInsertPlugsFreeActionRequest';
import { DestinyItemActionRequest } from '../../schemas/Destiny/Requests/Actions/DestinyItemActionRequest';
import { DestinyItemChangeResponse } from '../../schemas/Destiny/Responses/DestinyItemChangeResponse';
import { DestinyItemResponse } from '../../schemas/Destiny/Responses/DestinyItemResponse';
import { DestinyItemSetActionRequest } from '../../schemas/Destiny/Requests/Actions/DestinyItemSetActionRequest';
import { DestinyItemStateRequest } from '../../schemas/Destiny/Requests/Actions/DestinyItemStateRequest';
import { DestinyItemTransferRequest } from '../../schemas/Destiny/Requests/DestinyItemTransferRequest';
import { DestinyLeaderboard } from '../../schemas/Destiny/HistoricalStats/DestinyLeaderboard';
import { DestinyLinkedProfilesResponse } from '../../schemas/Destiny/Responses/DestinyLinkedProfilesResponse';
import { DestinyManifest } from '../../schemas/Destiny/Config/DestinyManifest';
import { DestinyMilestone } from '../../schemas/Destiny/Milestones/DestinyMilestone';
import { DestinyMilestoneContent } from '../../schemas/Destiny/Milestones/DestinyMilestoneContent';
import { DestinyPostGameCarnageReportData } from '../../schemas/Destiny/HistoricalStats/DestinyPostGameCarnageReportData';
import { DestinyPostmasterTransferRequest } from '../../schemas/Destiny/Requests/Actions/DestinyPostmasterTransferRequest';
import { DestinyProfileResponse } from '../../schemas/Destiny/Responses/DestinyProfileResponse';
import { DestinyPublicMilestone } from '../../schemas/Destiny/Milestones/DestinyPublicMilestone';
import { DestinyPublicVendorsResponse } from '../../schemas/Destiny/Responses/DestinyPublicVendorsResponse';
import { DestinyReportOffensePgcrRequest } from '../../schemas/Destiny/Reporting/Requests/DestinyReportOffensePgcrRequest';
import { DestinyStatsGroupType } from '../../schemas/Destiny/HistoricalStats/Definitions/DestinyStatsGroupType';
import { DestinyVendorFilter } from '../../schemas/Destiny/DestinyVendorFilter';
import { DestinyVendorResponse } from '../../schemas/Destiny/Responses/DestinyVendorResponse';
import { DestinyVendorsResponse } from '../../schemas/Destiny/Responses/DestinyVendorsResponse';
import { ExactSearchRequest } from '../../schemas/User/ExactSearchRequest';
import { PeriodType } from '../../schemas/Destiny/HistoricalStats/Definitions/PeriodType';
import { ServerResponse } from '../../generics/ServerResponse';
import { UserInfoCard } from '../../schemas/User/UserInfoCard';
/**
 * Returns the current version of the manifest as a json object.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetDestinyManifest}
 */
export declare function getDestinyManifest(
  http: HttpClient
): Promise<ServerResponse<DestinyManifest>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetDestinyEntityDefinition}
 */
export declare type GetDestinyEntityDefinitionParams = {
  /**
   * The type of entity for whom you would like results. These correspond to the
   * entity's definition contract name. For instance, if you are looking for items,
   * this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint
   * is still in beta, and may experience rough edges. The schema is tentatively in
   * final form, but there may be bugs that prevent desirable operation.
   */
  entityType: string;
  /** The hash identifier for the specific Entity you want returned. */
  hashIdentifier: number;
};
/**
 * Returns the static definition of an entity of the given Type and hash identifier.
 * Examine the API Documentation for the Type Names of entities that have their
 * own definitions. Note that the return type will always *inherit from*
 * DestinyDefinition, but the specific type returned will be the requested entity
 * type if it can be found. Please don't use this as a chatty alternative to the
 * Manifest database if you require large sets of data, but for simple and one-off
 * accesses this should be handy.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetDestinyEntityDefinition}
 */
export declare function getDestinyEntityDefinition(
  http: HttpClient,
  params: GetDestinyEntityDefinitionParams
): Promise<ServerResponse<DestinyDefinition>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.SearchDestinyPlayerByBungieName}
 */
export declare type SearchDestinyPlayerByBungieNameParams = {
  /**
   * A valid non-BungieNet membership type, or All. Indicates which memberships to
   * return. You probably want this set to All.
   */
  membershipType: BungieMembershipType;
};
/**
 * Returns a list of Destiny memberships given a global Bungie Display Name. This
 * method will hide overridden memberships due to cross save.
 * @see {@link https://bungie-net.github.io/#Destiny2.SearchDestinyPlayerByBungieName}
 */
export declare function searchDestinyPlayerByBungieName(
  http: HttpClient,
  params: SearchDestinyPlayerByBungieNameParams,
  body: ExactSearchRequest
): Promise<ServerResponse<UserInfoCard[]>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLinkedProfiles}
 */
export declare type GetLinkedProfilesParams = {
  /**
   * (optional) if set to 'true', all memberships regardless of whether they're
   * obscured by overrides will be returned. Normal privacy restrictions on account
   * linking will still apply no matter what.
   */
  getAllMemberships?: boolean;
  /**
   * The ID of the membership whose linked Destiny accounts you want returned. Make
   * sure your membership ID matches its Membership Type: don't pass us a PSN
   * membership ID and the XBox membership type, it's not going to work!
   */
  membershipId: string;
  /** The type for the membership whose linked Destiny accounts you want returned. */
  membershipType: BungieMembershipType;
};
/**
 * Returns a summary information about all profiles linked to the requesting
 * membership type/membership ID that have valid Destiny information. The passed-in
 * Membership Type/Membership ID may be a Bungie.Net membership or a Destiny
 * membership. It only returns the minimal amount of data to begin making more
 * substantive requests, but will hopefully serve as a useful alternative to
 * UserServices for people who just care about Destiny data. Note that it will only
 * return linked accounts whose linkages you are allowed to view.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLinkedProfiles}
 */
export declare function getLinkedProfiles(
  http: HttpClient,
  params: GetLinkedProfilesParams
): Promise<ServerResponse<DestinyLinkedProfilesResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetProfile}
 */
export declare type GetProfileParams = {
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** Destiny membership ID. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Returns Destiny Profile information for the supplied membership.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetProfile}
 */
export declare function getProfile(
  http: HttpClient,
  params: GetProfileParams
): Promise<ServerResponse<DestinyProfileResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetCharacter}
 */
export declare type GetCharacterParams = {
  /** ID of the character. */
  characterId: string;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** Destiny membership ID. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Returns character information for the supplied character.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetCharacter}
 */
export declare function getCharacter(
  http: HttpClient,
  params: GetCharacterParams
): Promise<ServerResponse<DestinyCharacterResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanWeeklyRewardState}
 */
export declare type GetClanWeeklyRewardStateParams = {
  /** A valid group id of clan. */
  groupId: string;
};
/**
 * Returns information on the weekly clan rewards and if the clan has earned them
 * or not. Note that this will always report rewards as not redeemed.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanWeeklyRewardState}
 */
export declare function getClanWeeklyRewardState(
  http: HttpClient,
  params: GetClanWeeklyRewardStateParams
): Promise<ServerResponse<DestinyMilestone>>;
/**
 * Returns the dictionary of values for the Clan Banner
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanBannerSource}
 */
export declare function getClanBannerSource(
  http: HttpClient
): Promise<ServerResponse<ClanBannerSource>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetItem}
 */
export declare type GetItemParams = {
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** The membership ID of the destiny profile. */
  destinyMembershipId: string;
  /** The Instance ID of the destiny item. */
  itemInstanceId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is
 * one with an ItemInstanceId. Non-instanced items, such as materials, have no
 * useful instance-specific details and thus are not queryable here.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetItem}
 */
export declare function getItem(
  http: HttpClient,
  params: GetItemParams
): Promise<ServerResponse<DestinyItemResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetVendors}
 */
export declare type GetVendorsParams = {
  /** The Destiny Character ID of the character for whom we're getting vendor info. */
  characterId: string;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** Destiny membership ID of another user. You may be denied. */
  destinyMembershipId: string;
  /** The filter of what vendors and items to return, if any. */
  filter?: DestinyVendorFilter;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Get currently available vendors from the list of vendors that can possibly have
 * rotating inventory. Note that this does not include things like preview vendors
 * and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use
 * their definitions as-is for those.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetVendors}
 */
export declare function getVendors(
  http: HttpClient,
  params: GetVendorsParams
): Promise<ServerResponse<DestinyVendorsResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetVendor}
 */
export declare type GetVendorParams = {
  /** The Destiny Character ID of the character for whom we're getting vendor info. */
  characterId: string;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** Destiny membership ID of another user. You may be denied. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
  /** The Hash identifier of the Vendor to be returned. */
  vendorHash: number;
};
/**
 * Get the details of a specific Vendor.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetVendor}
 */
export declare function getVendor(
  http: HttpClient,
  params: GetVendorParams
): Promise<ServerResponse<DestinyVendorResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPublicVendors}
 */
export declare type GetPublicVendorsParams = {
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
};
/**
 * Get items available from vendors where the vendors have items for sale that are
 * common for everyone. If any portion of the Vendor's available inventory is
 * character or account specific, we will be unable to return their data from this
 * endpoint due to the way that available inventory is computed. As I am often
 * guilty of saying: 'It's a long story...'
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPublicVendors}
 */
export declare function getPublicVendors(
  http: HttpClient,
  params: GetPublicVendorsParams
): Promise<ServerResponse<DestinyPublicVendorsResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetCollectibleNodeDetails}
 */
export declare type GetCollectibleNodeDetailsParams = {
  /**
   * The Destiny Character ID of the character for whom we're getting collectible
   * detail info.
   */
  characterId: string;
  /**
   * The hash identifier of the Presentation Node for whom we should return
   * collectible details. Details will only be returned for collectibles that are
   * direct descendants of this node.
   */
  collectiblePresentationNodeHash: number;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  components: DestinyComponentType[];
  /** Destiny membership ID of another user. You may be denied. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Given a Presentation Node that has Collectibles as direct descendants, this will
 * return item details about those descendants in the context of the requesting
 * character.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetCollectibleNodeDetails}
 */
export declare function getCollectibleNodeDetails(
  http: HttpClient,
  params: GetCollectibleNodeDetailsParams
): Promise<ServerResponse<DestinyCollectibleNodeDetailResponse>>;
/**
 * Transfer an item to/from your vault. You must have a valid Destiny account. You
 * must also pass BOTH a reference AND an instance ID if it's an instanced item.
 * itshappening.gif
 * @see {@link https://bungie-net.github.io/#Destiny2.TransferItem}
 */
export declare function transferItem(
  http: HttpClient,
  body: DestinyItemTransferRequest
): Promise<ServerResponse<number>>;
/**
 * Extract an item from the Postmaster, with whatever implications that may entail.
 * You must have a valid Destiny account. You must also pass BOTH a reference AND
 * an instance ID if it's an instanced item.
 * @see {@link https://bungie-net.github.io/#Destiny2.PullFromPostmaster}
 */
export declare function pullFromPostmaster(
  http: HttpClient,
  body: DestinyPostmasterTransferRequest
): Promise<ServerResponse<number>>;
/**
 * Equip an item. You must have a valid Destiny Account, and either be in a social
 * space, in orbit, or offline.
 * @see {@link https://bungie-net.github.io/#Destiny2.EquipItem}
 */
export declare function equipItem(
  http: HttpClient,
  body: DestinyItemActionRequest
): Promise<ServerResponse<number>>;
/**
 * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account,
 * and either be in a social space, in orbit, or offline. Any items not found on
 * your character will be ignored.
 * @see {@link https://bungie-net.github.io/#Destiny2.EquipItems}
 */
export declare function equipItems(
  http: HttpClient,
  body: DestinyItemSetActionRequest
): Promise<ServerResponse<DestinyEquipItemResults>>;
/**
 * Set the Lock State for an instanced item. You must have a valid Destiny Account.
 * @see {@link https://bungie-net.github.io/#Destiny2.SetItemLockState}
 */
export declare function setItemLockState(
  http: HttpClient,
  body: DestinyItemStateRequest
): Promise<ServerResponse<number>>;
/**
 * Set the Tracking State for an instanced item, if that item is a Quest or Bounty.
 * You must have a valid Destiny Account. Yeah, it's an item.
 * @see {@link https://bungie-net.github.io/#Destiny2.SetQuestTrackedState}
 */
export declare function setQuestTrackedState(
  http: HttpClient,
  body: DestinyItemStateRequest
): Promise<ServerResponse<number>>;
/**
 * Insert a plug into a socketed item. I know how it sounds, but I assure you it's
 * much more G-rated than you might be guessing. We haven't decided yet whether
 * this will be able to insert plugs that have side effects, but if we do it will
 * require special scope permission for an application attempting to do so. You
 * must have a valid Destiny Account, and either be in a social space, in orbit, or
 * offline. Request must include proof of permission for 'InsertPlugs' from the
 * account owner.
 * @see {@link https://bungie-net.github.io/#Destiny2.InsertSocketPlug}
 */
export declare function insertSocketPlug(
  http: HttpClient,
  body: DestinyInsertPlugsActionRequest
): Promise<ServerResponse<DestinyItemChangeResponse>>;
/**
 * Insert a 'free' plug into an item's socket. This does not require 'Advanced
 * Write Action' authorization and is available to 3rd-party apps, but will only
 * work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders,
 * Ornaments, etc.). You must have a valid Destiny Account, and the character must
 * either be in a social space, in orbit, or offline.
 * @see {@link https://bungie-net.github.io/#Destiny2.InsertSocketPlugFree}
 */
export declare function insertSocketPlugFree(
  http: HttpClient,
  body: DestinyInsertPlugsFreeActionRequest
): Promise<ServerResponse<DestinyItemChangeResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPostGameCarnageReport}
 */
export declare type GetPostGameCarnageReportParams = {
  /** The ID of the activity whose PGCR is requested. */
  activityId: string;
};
/**
 * Gets the available post game carnage report for the activity ID.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPostGameCarnageReport}
 */
export declare function getPostGameCarnageReport(
  http: HttpClient,
  params: GetPostGameCarnageReportParams
): Promise<ServerResponse<DestinyPostGameCarnageReportData>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.ReportOffensivePostGameCarnageReportPlayer}
 */
export declare type ReportOffensivePostGameCarnageReportPlayerParams = {
  /** The ID of the activity where you ran into the brigand that you're reporting. */
  activityId: string;
};
/**
 * Report a player that you met in an activity that was engaging in ToS-violating
 * activities. Both you and the offending player must have played in the activityId
 * passed in. Please use this judiciously and only when you have strong suspicions
 * of violation, pretty please.
 * @see {@link https://bungie-net.github.io/#Destiny2.ReportOffensivePostGameCarnageReportPlayer}
 */
export declare function reportOffensivePostGameCarnageReportPlayer(
  http: HttpClient,
  params: ReportOffensivePostGameCarnageReportPlayerParams,
  body: DestinyReportOffensePgcrRequest
): Promise<ServerResponse<number>>;
/**
 * Gets historical stats definitions.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetHistoricalStatsDefinition}
 */
export declare function getHistoricalStatsDefinition(http: HttpClient): Promise<
  ServerResponse<{
    [key: string]: DestinyHistoricalStatsDefinition;
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanLeaderboards}
 */
export declare type GetClanLeaderboardsParams = {
  /** Group ID of the clan whose leaderboards you wish to fetch. */
  groupId: string;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  maxtop?: number;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  modes?: string;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  statid?: string;
};
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanLeaderboards}
 */
export declare function getClanLeaderboards(
  http: HttpClient,
  params: GetClanLeaderboardsParams
): Promise<
  ServerResponse<{
    [key: string]: {
      [key: string]: DestinyLeaderboard;
    };
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanAggregateStats}
 */
export declare type GetClanAggregateStatsParams = {
  /** Group ID of the clan whose leaderboards you wish to fetch. */
  groupId: string;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  modes?: string;
};
/**
 * Gets aggregated stats for a clan using the same categories as the clan
 * leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough
 * edges. The schema is in final form, but there may be bugs that prevent desirable
 * operation.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetClanAggregateStats}
 */
export declare function getClanAggregateStats(
  http: HttpClient,
  params: GetClanAggregateStatsParams
): Promise<ServerResponse<DestinyClanAggregateStat[]>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLeaderboards}
 */
export declare type GetLeaderboardsParams = {
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  maxtop?: number;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  modes?: string;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  statid?: string;
};
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been
 * implemented. It is being returned for a preview of future functionality, and for
 * public comment/suggestion/preparation.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLeaderboards}
 */
export declare function getLeaderboards(
  http: HttpClient,
  params: GetLeaderboardsParams
): Promise<
  ServerResponse<{
    [key: string]: {
      [key: string]: DestinyLeaderboard;
    };
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLeaderboardsForCharacter}
 */
export declare type GetLeaderboardsForCharacterParams = {
  /**
   * The specific character to build the leaderboard around for the provided Destiny
   * Membership.
   */
  characterId: string;
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  maxtop?: number;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  modes?: string;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  statid?: string;
};
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetLeaderboardsForCharacter}
 */
export declare function getLeaderboardsForCharacter(
  http: HttpClient,
  params: GetLeaderboardsForCharacterParams
): Promise<
  ServerResponse<{
    [key: string]: {
      [key: string]: DestinyLeaderboard;
    };
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.SearchDestinyEntities}
 */
export declare type SearchDestinyEntitiesParams = {
  /** Page number to return, starting with 0. */
  page?: number;
  /** The string to use when searching for Destiny entities. */
  searchTerm: string;
  /**
   * The type of entity for whom you would like results. These correspond to the
   * entity's definition contract name. For instance, if you are looking for items,
   * this property should be 'DestinyInventoryItemDefinition'.
   */
  type: string;
};
/**
 * Gets a page list of Destiny items.
 * @see {@link https://bungie-net.github.io/#Destiny2.SearchDestinyEntities}
 */
export declare function searchDestinyEntities(
  http: HttpClient,
  params: SearchDestinyEntitiesParams
): Promise<ServerResponse<DestinyEntitySearchResult>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetHistoricalStats}
 */
export declare type GetHistoricalStatsParams = {
  /**
   * The id of the character to retrieve. You can omit this character ID or set it to
   * 0 to get aggregate stats across all characters.
   */
  characterId: string;
  /**
   * Last day to return when daily stats are requested. Use the format YYYY-MM-DD.
   * Currently, we cannot allow more than 31 days of daily data to be requested in a
   * single request.
   */
  dayend?: string;
  /**
   * First day to return when daily stats are requested. Use the format YYYY-MM-DD.
   * Currently, we cannot allow more than 31 days of daily data to be requested in a
   * single request.
   */
  daystart?: string;
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /**
   * Group of stats to include, otherwise only general stats are returned. Comma
   * separated list is allowed. Values: General, Weapons, Medals
   */
  groups?: DestinyStatsGroupType[];
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
  /**
   * Game modes to return. See the documentation for DestinyActivityModeType for
   * valid values, and pass in string representation, comma delimited.
   */
  modes?: DestinyActivityModeType[];
  /**
   * Indicates a specific period type to return. Optional. May be: Daily, AllTime, or
   * Activity
   */
  periodType?: PeriodType;
};
/**
 * Gets historical stats for indicated character.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetHistoricalStats}
 */
export declare function getHistoricalStats(
  http: HttpClient,
  params: GetHistoricalStatsParams
): Promise<
  ServerResponse<{
    [key: string]: DestinyHistoricalStatsByPeriod;
  }>
>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetHistoricalStatsForAccount}
 */
export declare type GetHistoricalStatsForAccountParams = {
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /**
   * Groups of stats to include, otherwise only general stats are returned. Comma
   * separated list is allowed. Values: General, Weapons, Medals.
   */
  groups?: DestinyStatsGroupType[];
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Gets aggregate historical stats organized around each character for a given
 * account.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetHistoricalStatsForAccount}
 */
export declare function getHistoricalStatsForAccount(
  http: HttpClient,
  params: GetHistoricalStatsForAccountParams
): Promise<ServerResponse<DestinyHistoricalStatsAccountResult>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetActivityHistory}
 */
export declare type GetActivityHistoryParams = {
  /** The id of the character to retrieve. */
  characterId: string;
  /** Number of rows to return */
  count?: number;
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
  /**
   * A filter for the activity mode to be returned. None returns all activities. See
   * the documentation for DestinyActivityModeType for valid values, and pass in
   * string representation.
   */
  mode?: DestinyActivityModeType;
  /** Page number to return, starting with 0. */
  page?: number;
};
/**
 * Gets activity history stats for indicated character.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetActivityHistory}
 */
export declare function getActivityHistory(
  http: HttpClient,
  params: GetActivityHistoryParams
): Promise<ServerResponse<DestinyActivityHistoryResults>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetUniqueWeaponHistory}
 */
export declare type GetUniqueWeaponHistoryParams = {
  /** The id of the character to retrieve. */
  characterId: string;
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Gets details about unique weapon usage, including all exotic weapons.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetUniqueWeaponHistory}
 */
export declare function getUniqueWeaponHistory(
  http: HttpClient,
  params: GetUniqueWeaponHistoryParams
): Promise<ServerResponse<DestinyHistoricalWeaponStatsData>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetDestinyAggregateActivityStats}
 */
export declare type GetDestinyAggregateActivityStatsParams = {
  /** The specific character whose activities should be returned. */
  characterId: string;
  /** The Destiny membershipId of the user to retrieve. */
  destinyMembershipId: string;
  /** A valid non-BungieNet membership type. */
  membershipType: BungieMembershipType;
};
/**
 * Gets all activities the character has participated in together with aggregate
 * statistics for those activities.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetDestinyAggregateActivityStats}
 */
export declare function getDestinyAggregateActivityStats(
  http: HttpClient,
  params: GetDestinyAggregateActivityStatsParams
): Promise<ServerResponse<DestinyAggregateActivityResults>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPublicMilestoneContent}
 */
export declare type GetPublicMilestoneContentParams = {
  /** The identifier for the milestone to be returned. */
  milestoneHash: number;
};
/**
 * Gets custom localized content for the milestone of the given hash, if it exists.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPublicMilestoneContent}
 */
export declare function getPublicMilestoneContent(
  http: HttpClient,
  params: GetPublicMilestoneContentParams
): Promise<ServerResponse<DestinyMilestoneContent>>;
/**
 * Gets public information about currently available Milestones.
 * @see {@link https://bungie-net.github.io/#Destiny2.GetPublicMilestones}
 */
export declare function getPublicMilestones(http: HttpClient): Promise<
  ServerResponse<{
    [key: number]: DestinyPublicMilestone;
  }>
>;
/**
 * Initialize a request to perform an advanced write action.
 * @see {@link https://bungie-net.github.io/#Destiny2.AwaInitializeRequest}
 */
export declare function awaInitializeRequest(
  http: HttpClient,
  body: AwaPermissionRequested
): Promise<ServerResponse<AwaInitializeResponse>>;
/**
 * Provide the result of the user interaction. Called by the Bungie Destiny App to
 * approve or reject a request.
 * @see {@link https://bungie-net.github.io/#Destiny2.AwaProvideAuthorizationResult}
 */
export declare function awaProvideAuthorizationResult(
  http: HttpClient,
  body: AwaUserResponse
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#Destiny2.AwaGetActionToken}
 */
export declare type AwaGetActionTokenParams = {
  /** The identifier for the advanced write action request. */
  correlationId: string;
};
/**
 * Returns the action token if user approves the request.
 * @see {@link https://bungie-net.github.io/#Destiny2.AwaGetActionToken}
 */
export declare function awaGetActionToken(
  http: HttpClient,
  params: AwaGetActionTokenParams
): Promise<ServerResponse<AwaAuthorizationResult>>;
