/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.15.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-typedef code generator program,
 * adapted from <@link https://github.com/DestinyItemManager/bungie-api-ts>
 * Repository: <@link https://github.com/owensimpson/bungie-api-typedef>
 * Do not edit these files manually.
 */
import { HttpClient } from '../../http';
import { BungieMembershipType } from '../../schemas/BungieMembershipType';
import { ClanBanner } from '../../schemas/GroupsV2/ClanBanner';
import { EntityActionResult } from '../../schemas/Entities/EntityActionResult';
import { GetGroupsForMemberResponse } from '../../schemas/GroupsV2/GetGroupsForMemberResponse';
import { GroupApplicationListRequest } from '../../schemas/GroupsV2/GroupApplicationListRequest';
import { GroupApplicationRequest } from '../../schemas/GroupsV2/GroupApplicationRequest';
import { GroupApplicationResponse } from '../../schemas/GroupsV2/GroupApplicationResponse';
import { GroupBanRequest } from '../../schemas/GroupsV2/GroupBanRequest';
import { GroupDateRange } from '../../schemas/GroupsV2/GroupDateRange';
import { GroupEditAction } from '../../schemas/GroupsV2/GroupEditAction';
import { GroupMemberLeaveResult } from '../../schemas/GroupsV2/GroupMemberLeaveResult';
import { GroupMembershipSearchResponse } from '../../schemas/GroupsV2/GroupMembershipSearchResponse';
import { GroupNameSearchRequest } from '../../schemas/GroupsV2/GroupNameSearchRequest';
import { GroupOptionalConversation } from '../../schemas/GroupsV2/GroupOptionalConversation';
import { GroupOptionalConversationAddRequest } from '../../schemas/GroupsV2/GroupOptionalConversationAddRequest';
import { GroupOptionalConversationEditRequest } from '../../schemas/GroupsV2/GroupOptionalConversationEditRequest';
import { GroupOptionsEditAction } from '../../schemas/GroupsV2/GroupOptionsEditAction';
import { GroupPotentialMemberStatus } from '../../schemas/GroupsV2/GroupPotentialMemberStatus';
import { GroupPotentialMembershipSearchResponse } from '../../schemas/GroupsV2/GroupPotentialMembershipSearchResponse';
import { GroupQuery } from '../../schemas/GroupsV2/GroupQuery';
import { GroupResponse } from '../../schemas/GroupsV2/GroupResponse';
import { GroupSearchResponse } from '../../schemas/GroupsV2/GroupSearchResponse';
import { GroupTheme } from '../../schemas/Config/GroupTheme';
import { GroupType } from '../../schemas/GroupsV2/GroupType';
import { GroupV2Card } from '../../schemas/GroupsV2/GroupV2Card';
import { GroupsForMemberFilter } from '../../schemas/GroupsV2/GroupsForMemberFilter';
import { RuntimeGroupMemberType } from '../../schemas/GroupsV2/RuntimeGroupMemberType';
import { SearchResultOfGroupBan } from '../../schemas/SearchResultOfGroupBan';
import { SearchResultOfGroupMember } from '../../schemas/SearchResultOfGroupMember';
import { SearchResultOfGroupMemberApplication } from '../../schemas/SearchResultOfGroupMemberApplication';
import { ServerResponse } from '../../generics/ServerResponse';
/**
 * Returns a list of all available group avatars for the signed-in user.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetAvailableAvatars}
 */
export declare function getAvailableAvatars(http: HttpClient): Promise<
  ServerResponse<{
    [key: number]: string;
  }>
>;
/**
 * Returns a list of all available group themes.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetAvailableThemes}
 */
export declare function getAvailableThemes(http: HttpClient): Promise<ServerResponse<GroupTheme[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetUserClanInviteSetting}
 */
export declare type GetUserClanInviteSettingParams = {
  /** The Destiny membership type of the account we wish to access settings. */
  mType: BungieMembershipType;
};
/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetUserClanInviteSetting}
 */
export declare function getUserClanInviteSetting(
  http: HttpClient,
  params: GetUserClanInviteSettingParams
): Promise<ServerResponse<boolean>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetRecommendedGroups}
 */
export declare type GetRecommendedGroupsParams = {
  /** Requested range in which to pull recommended groups */
  createDateRange: GroupDateRange;
  /** Type of groups requested */
  groupType: GroupType;
};
/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetRecommendedGroups}
 */
export declare function getRecommendedGroups(
  http: HttpClient,
  params: GetRecommendedGroupsParams
): Promise<ServerResponse<GroupV2Card[]>>;
/**
 * Search for Groups.
 * @see {@link https://bungie-net.github.io/#GroupV2.GroupSearch}
 */
export declare function groupSearch(
  http: HttpClient,
  body: GroupQuery
): Promise<ServerResponse<GroupSearchResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroup}
 */
export declare type GetGroupParams = {
  /** Requested group's id. */
  groupId: string;
};
/**
 * Get information about a specific group of the given ID.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroup}
 */
export declare function getGroup(
  http: HttpClient,
  params: GetGroupParams
): Promise<ServerResponse<GroupResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupByName}
 */
export declare type GetGroupByNameParams = {
  /** Exact name of the group to find. */
  groupName: string;
  /** Type of group to find. */
  groupType: GroupType;
};
/**
 * Get information about a specific group with the given name and type.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupByName}
 */
export declare function getGroupByName(
  http: HttpClient,
  params: GetGroupByNameParams
): Promise<ServerResponse<GroupResponse>>;
/**
 * Get information about a specific group with the given name and type. The POST
 * version.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupByNameV2}
 */
export declare function getGroupByNameV2(
  http: HttpClient,
  body: GroupNameSearchRequest
): Promise<ServerResponse<GroupResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupOptionalConversations}
 */
export declare type GetGroupOptionalConversationsParams = {
  /** Requested group's id. */
  groupId: string;
};
/**
 * Gets a list of available optional conversation channels and their settings.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupOptionalConversations}
 */
export declare function getGroupOptionalConversations(
  http: HttpClient,
  params: GetGroupOptionalConversationsParams
): Promise<ServerResponse<GroupOptionalConversation[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.EditGroup}
 */
export declare type EditGroupParams = {
  /** Group ID of the group to edit. */
  groupId: string;
};
/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 * @see {@link https://bungie-net.github.io/#GroupV2.EditGroup}
 */
export declare function editGroup(
  http: HttpClient,
  params: EditGroupParams,
  body: GroupEditAction
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.EditClanBanner}
 */
export declare type EditClanBannerParams = {
  /** Group ID of the group to edit. */
  groupId: string;
};
/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 * @see {@link https://bungie-net.github.io/#GroupV2.EditClanBanner}
 */
export declare function editClanBanner(
  http: HttpClient,
  params: EditClanBannerParams,
  body: ClanBanner
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.EditFounderOptions}
 */
export declare type EditFounderOptionsParams = {
  /** Group ID of the group to edit. */
  groupId: string;
};
/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 * @see {@link https://bungie-net.github.io/#GroupV2.EditFounderOptions}
 */
export declare function editFounderOptions(
  http: HttpClient,
  params: EditFounderOptionsParams,
  body: GroupOptionsEditAction
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.AddOptionalConversation}
 */
export declare type AddOptionalConversationParams = {
  /** Group ID of the group to edit. */
  groupId: string;
};
/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 * @see {@link https://bungie-net.github.io/#GroupV2.AddOptionalConversation}
 */
export declare function addOptionalConversation(
  http: HttpClient,
  params: AddOptionalConversationParams,
  body: GroupOptionalConversationAddRequest
): Promise<ServerResponse<string>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.EditOptionalConversation}
 */
export declare type EditOptionalConversationParams = {
  /** Conversation Id of the channel being edited. */
  conversationId: string;
  /** Group ID of the group to edit. */
  groupId: string;
};
/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 * @see {@link https://bungie-net.github.io/#GroupV2.EditOptionalConversation}
 */
export declare function editOptionalConversation(
  http: HttpClient,
  params: EditOptionalConversationParams,
  body: GroupOptionalConversationEditRequest
): Promise<ServerResponse<string>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetMembersOfGroup}
 */
export declare type GetMembersOfGroupParams = {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** The ID of the group. */
  groupId: string;
  /** Filter out other member types. Use None for all members. */
  memberType?: RuntimeGroupMemberType;
  /**
   * The name fragment upon which a search should be executed for members with
   * matching display or unique names.
   */
  nameSearch?: string;
};
/**
 * Get the list of members in a given group.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetMembersOfGroup}
 */
export declare function getMembersOfGroup(
  http: HttpClient,
  params: GetMembersOfGroupParams
): Promise<ServerResponse<SearchResultOfGroupMember>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetAdminsAndFounderOfGroup}
 */
export declare type GetAdminsAndFounderOfGroupParams = {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** The ID of the group. */
  groupId: string;
};
/**
 * Get the list of members in a given group who are of admin level or higher.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetAdminsAndFounderOfGroup}
 */
export declare function getAdminsAndFounderOfGroup(
  http: HttpClient,
  params: GetAdminsAndFounderOfGroupParams
): Promise<ServerResponse<SearchResultOfGroupMember>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.EditGroupMembership}
 */
export declare type EditGroupMembershipParams = {
  /** ID of the group to which the member belongs. */
  groupId: string;
  /** Membership ID to modify. */
  membershipId: string;
  /** Membership type of the provide membership ID. */
  membershipType: BungieMembershipType;
  /** New membertype for the specified member. */
  memberType: RuntimeGroupMemberType;
};
/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 * @see {@link https://bungie-net.github.io/#GroupV2.EditGroupMembership}
 */
export declare function editGroupMembership(
  http: HttpClient,
  params: EditGroupMembershipParams
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.KickMember}
 */
export declare type KickMemberParams = {
  /** Group ID to kick the user from. */
  groupId: string;
  /** Membership ID to kick. */
  membershipId: string;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 * @see {@link https://bungie-net.github.io/#GroupV2.KickMember}
 */
export declare function kickMember(
  http: HttpClient,
  params: KickMemberParams
): Promise<ServerResponse<GroupMemberLeaveResult>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.BanMember}
 */
export declare type BanMemberParams = {
  /** Group ID that has the member to ban. */
  groupId: string;
  /** Membership ID of the member to ban from the group. */
  membershipId: string;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 * @see {@link https://bungie-net.github.io/#GroupV2.BanMember}
 */
export declare function banMember(
  http: HttpClient,
  params: BanMemberParams,
  body: GroupBanRequest
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.UnbanMember}
 */
export declare type UnbanMemberParams = {
  groupId: string;
  /** Membership ID of the member to unban from the group */
  membershipId: string;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Unbans the requested member, allowing them to re-apply for membership.
 * @see {@link https://bungie-net.github.io/#GroupV2.UnbanMember}
 */
export declare function unbanMember(
  http: HttpClient,
  params: UnbanMemberParams
): Promise<ServerResponse<number>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetBannedMembersOfGroup}
 */
export declare type GetBannedMembersOfGroupParams = {
  /** Page number (starting with 1). Each page has a fixed size of 50 entries. */
  currentpage: number;
  /** Group ID whose banned members you are fetching */
  groupId: string;
};
/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetBannedMembersOfGroup}
 */
export declare function getBannedMembersOfGroup(
  http: HttpClient,
  params: GetBannedMembersOfGroupParams
): Promise<ServerResponse<SearchResultOfGroupBan>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.AbdicateFoundership}
 */
export declare type AbdicateFoundershipParams = {
  /** The new founder for this group. Must already be a group admin. */
  founderIdNew: string;
  /** The target group id. */
  groupId: string;
  /** Membership type of the provided founderIdNew. */
  membershipType: BungieMembershipType;
};
/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 * @see {@link https://bungie-net.github.io/#GroupV2.AbdicateFoundership}
 */
export declare function abdicateFoundership(
  http: HttpClient,
  params: AbdicateFoundershipParams
): Promise<ServerResponse<boolean>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetPendingMemberships}
 */
export declare type GetPendingMembershipsParams = {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** ID of the group. */
  groupId: string;
};
/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetPendingMemberships}
 */
export declare function getPendingMemberships(
  http: HttpClient,
  params: GetPendingMembershipsParams
): Promise<ServerResponse<SearchResultOfGroupMemberApplication>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetInvitedIndividuals}
 */
export declare type GetInvitedIndividualsParams = {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** ID of the group. */
  groupId: string;
};
/**
 * Get the list of users who have been invited into the group.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetInvitedIndividuals}
 */
export declare function getInvitedIndividuals(
  http: HttpClient,
  params: GetInvitedIndividualsParams
): Promise<ServerResponse<SearchResultOfGroupMemberApplication>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.ApproveAllPending}
 */
export declare type ApproveAllPendingParams = {
  /** ID of the group. */
  groupId: string;
};
/**
 * Approve all of the pending users for the given group.
 * @see {@link https://bungie-net.github.io/#GroupV2.ApproveAllPending}
 */
export declare function approveAllPending(
  http: HttpClient,
  params: ApproveAllPendingParams,
  body: GroupApplicationRequest
): Promise<ServerResponse<EntityActionResult[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.DenyAllPending}
 */
export declare type DenyAllPendingParams = {
  /** ID of the group. */
  groupId: string;
};
/**
 * Deny all of the pending users for the given group.
 * @see {@link https://bungie-net.github.io/#GroupV2.DenyAllPending}
 */
export declare function denyAllPending(
  http: HttpClient,
  params: DenyAllPendingParams,
  body: GroupApplicationRequest
): Promise<ServerResponse<EntityActionResult[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.ApprovePendingForList}
 */
export declare type ApprovePendingForListParams = {
  /** ID of the group. */
  groupId: string;
};
/**
 * Approve all of the pending users for the given group.
 * @see {@link https://bungie-net.github.io/#GroupV2.ApprovePendingForList}
 */
export declare function approvePendingForList(
  http: HttpClient,
  params: ApprovePendingForListParams,
  body: GroupApplicationListRequest
): Promise<ServerResponse<EntityActionResult[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.ApprovePending}
 */
export declare type ApprovePendingParams = {
  /** ID of the group. */
  groupId: string;
  /** The membership id being approved. */
  membershipId: string;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 * @see {@link https://bungie-net.github.io/#GroupV2.ApprovePending}
 */
export declare function approvePending(
  http: HttpClient,
  params: ApprovePendingParams,
  body: GroupApplicationRequest
): Promise<ServerResponse<boolean>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.DenyPendingForList}
 */
export declare type DenyPendingForListParams = {
  /** ID of the group. */
  groupId: string;
};
/**
 * Deny all of the pending users for the given group that match the passed-in .
 * @see {@link https://bungie-net.github.io/#GroupV2.DenyPendingForList}
 */
export declare function denyPendingForList(
  http: HttpClient,
  params: DenyPendingForListParams,
  body: GroupApplicationListRequest
): Promise<ServerResponse<EntityActionResult[]>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupsForMember}
 */
export declare type GetGroupsForMemberParams = {
  /** Filter apply to list of joined groups. */
  filter: GroupsForMemberFilter;
  /** Type of group the supplied member founded. */
  groupType: GroupType;
  /** Membership ID to for which to find founded groups. */
  membershipId: string;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Get information about the groups that a given member has joined.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetGroupsForMember}
 */
export declare function getGroupsForMember(
  http: HttpClient,
  params: GetGroupsForMemberParams
): Promise<ServerResponse<GetGroupsForMemberResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.RecoverGroupForFounder}
 */
export declare type RecoverGroupForFounderParams = {
  /** Type of group the supplied member founded. */
  groupType: GroupType;
  /** Membership ID to for which to find founded groups. */
  membershipId: string;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Allows a founder to manually recover a group they can see in game but not on
 * bungie.net
 * @see {@link https://bungie-net.github.io/#GroupV2.RecoverGroupForFounder}
 */
export declare function recoverGroupForFounder(
  http: HttpClient,
  params: RecoverGroupForFounderParams
): Promise<ServerResponse<GroupMembershipSearchResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.GetPotentialGroupsForMember}
 */
export declare type GetPotentialGroupsForMemberParams = {
  /** Filter apply to list of potential joined groups. */
  filter: GroupPotentialMemberStatus;
  /** Type of group the supplied member applied. */
  groupType: GroupType;
  /** Membership ID to for which to find applied groups. */
  membershipId: string;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
};
/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 * @see {@link https://bungie-net.github.io/#GroupV2.GetPotentialGroupsForMember}
 */
export declare function getPotentialGroupsForMember(
  http: HttpClient,
  params: GetPotentialGroupsForMemberParams
): Promise<ServerResponse<GroupPotentialMembershipSearchResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.IndividualGroupInvite}
 */
export declare type IndividualGroupInviteParams = {
  /** ID of the group you would like to join. */
  groupId: string;
  /** Membership id of the account being invited. */
  membershipId: string;
  /** MembershipType of the account being invited. */
  membershipType: BungieMembershipType;
};
/**
 * Invite a user to join this group.
 * @see {@link https://bungie-net.github.io/#GroupV2.IndividualGroupInvite}
 */
export declare function individualGroupInvite(
  http: HttpClient,
  params: IndividualGroupInviteParams,
  body: GroupApplicationRequest
): Promise<ServerResponse<GroupApplicationResponse>>;
/**
 * @see {@link https://bungie-net.github.io/#GroupV2.IndividualGroupInviteCancel}
 */
export declare type IndividualGroupInviteCancelParams = {
  /** ID of the group you would like to join. */
  groupId: string;
  /** Membership id of the account being cancelled. */
  membershipId: string;
  /** MembershipType of the account being cancelled. */
  membershipType: BungieMembershipType;
};
/**
 * Cancels a pending invitation to join a group.
 * @see {@link https://bungie-net.github.io/#GroupV2.IndividualGroupInviteCancel}
 */
export declare function individualGroupInviteCancel(
  http: HttpClient,
  params: IndividualGroupInviteCancelParams
): Promise<ServerResponse<GroupApplicationResponse>>;
